test_name: Check that server is alive

stages:
  - name: Verify test endpoint returns expected success message
    request:
      url: http://localhost:5000/test
      method: GET
    response:
      status_code: 200
      body:
        message: success

---
test_name: Check response status code for addition API

# Write a test that POSTs a JSON document {'first_number': 5, 'second_number': 6}
# to http://localhost:5000/add and checks that the status code returned equals 200

stages:
  - name: Verify that status code equals 200 when two integers are specified
    request:
      url: http://localhost:5000/add
      json:
        first_number: 5
        second_number: 6
      method: POST
    response:
      status_code: 200

---
test_name: Check response content type header for addition API

# Write a test that POSTs a JSON document {'first_number': 5, 'second_number': 6}
# to http://localhost:5000/add and checks that the value of the content-type header
# of the response is equal to application/json

stages:
  - name: Verify that response content-type header value equals application/json
    request:
      url: http://localhost:5000/add
      json:
        first_number: 5
        second_number: 6
      method: POST
    response:
      headers:
        content-type: application/json

---
test_name: Make sure server doubles number properly

# Write a test that POSTs a JSON document {'first_number': 5, 'second_number': 6}
# to http://localhost:5000/add and checks that the value of the field 'result'
# in the body of the response is equal to 11

stages:
  - name: Verify that 5 plus 6 equals 11
    request:
      url: http://localhost:5000/add
      json:
        first_number: 5
        second_number: 6
      method: POST
    response:
      body:
        result: 11

---
test_name: Check that first_number field is required

# Write a test that POSTs a JSON document without the first_number field
# to http://localhost:5000/add and check that the response status code is 400
# and the 'error' field is equal to 'first_number is a required field in the request body'

stages:
  - name: Verify that omitting the first_number field results in a HTTP 400 with a nice error message
    request:
      url: http://localhost:5000/add
      json:
        second_number: 6
      method: POST
    response:
      status_code: 400
      body:
        error: first_number is a required field in the request body

---
test_name: Check that second_number field cannot contain a string value

# Write a test that POSTs a JSON document where the value for the second_number field is 'banana'
# to http://localhost:5000/add and check that the response status code is 400
# and the 'error' field is equal to 'both first_number and second_number need to be integer values'

stages:
  - name: Verify that passing a string value to the second_number field results in a HTTP 400 with a nice error message
    request:
      url: http://localhost:5000/add
      json:
        first_number: 5
        second_number: banana
      method: POST
    response:
      status_code: 400
      body:
        error: both first_number and second_number need to be integer values